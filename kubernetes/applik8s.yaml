apiVersion: v1
kind: Service
metadata:
  name: amqp
  labels:
    app: rabbitmq
    tier: amqp
spec:
  ports:
    # the port that this service should serve on
  - port: 5672
    targetPort: 5672
  selector:
    app: rabbitmq
    tier: amqp
---
apiVersion: v1
kind: ReplicationController
metadata:
  name: amqp
  # these labels can be applied automatically
  # from the labels in the pod template if not set
  labels:
    app: rabbitmq
    tier: amqp
spec:
  # this replicas value is default
  # modify it according to your case
  replicas: 1
  # selector can be applied automatically
  # from the labels in the pod template if not set
  # selector:
  #   app: guestbook
  #   role: master
  #   tier: backend
  template:
    metadata:
      labels:
        app: rabbitmq
        tier: amqp
    spec:
      containers:
      - name: amqp
        image: rabbitmq:3.5.3
        ports:
        - containerPort: 5672
---
apiVersion: v1
kind: Service
metadata:
  name: box
  labels:
    app: box
    tier: backend
spec:
  ports:
    # the port that this service should serve on
  - port: 8081
    targetPort: 8081
  selector:
    app: box
    tier: backend
---
apiVersion: v1
kind: ReplicationController
metadata:
  name: box
  # these labels can be applied automatically
  # from the labels in the pod template if not set
  labels:
    app: box
    tier: backend
spec:
  # this replicas value is default
  # modify it according to your case
  replicas: 1
  # selector can be applied automatically
  # from the labels in the pod template if not set
  # selector:
  #   app: guestbook
  #   role: slave
  #   tier: backend
  template:
    metadata:
      labels:
        app: box
        tier: backend
    spec:
      containers:
      - name: box
        image: nherbaut/dvd2c-box
        env:
        - name: amqp
          value: dns
          # If your cluster config does not include a dns service, then to
          # instead access an environment variable to find the master
          # service's host, comment out the 'value: dns' line above, and
          # uncomment the line below.
          # value: env
        ports:
        - containerPort: 8081
---
apiVersion: v1
kind: Service
metadata:
  name: frontend
  labels:
    app: mediahome
    tier: frontend
spec:
  # if your cluster supports it, uncomment the following to automatically create
  # an external load-balanced IP for the frontend service.
  type: NodePort
  ports:
    # the port that this service should serve on
  - port: 8080
    targetPort: 8080
  selector:
    app: mediahome
    tier: frontend
---
apiVersion: v1
kind: ReplicationController
metadata:
  name: frontend
  # these labels can be applied automatically
  # from the labels in the pod template if not set
  labels:
    app: mediahome
    tier: frontend
spec:
  # this replicas value is default
  # modify it according to your case
  replicas: 1
  # selector can be applied automatically
  # from the labels in the pod template if not set
  # selector:
  #   app: guestbook
  #   tier: frontend
  template:
    metadata:
      labels:
        app: mediahome
        tier: frontend
    spec:
      containers:
      - name: frontend
        image: nherbaut/frontend
        resources:
          requests:
            cpu: 100m
            memory: 100Mi
        env:
        - name: box
          value: dns
          # If your cluster config does not include a dns service, then to
          # instead access environment variables to find service host
          # info, comment out the 'value: dns' line above, and uncomment the
          # line below.
          # value: env
        ports:
        - containerPort: 8080
---
apiVersion: v1
kind: Service
metadata:
  name: worker
  labels:
    app: worker
    tier: worker
spec:
  # if your cluster supports it, uncomment the following to automatically create
  # an external load-balanced IP for the frontend service.
  # type: LoadBalancer
  selector:
    app: worker
    tier: worker
  ports:
    - port: 5672
      targetPort: 5672
---
apiVersion: v1
kind: ReplicationController
metadata:
  name: worker
  # these labels can be applied automatically
  # from the labels in the pod template if not set
  labels:
    app: worker
    tier: worker
spec:
  # this replicas value is default
  # modify it according to your case
  replicas: 3
  # selector can be applied automatically
  # from the labels in the pod template if not set
  # selector:
  #   app: guestbook
  #   tier: frontend
  template:
    metadata:
      labels:
        app: worker
        tier: worker
    spec:
      containers:
      - name: worker
        image: nherbaut/worker:jdev
        env:
        - name: amqp
          value: dns
          # If your cluster config does not include a dns service, then to
          # instead access environment variables to find service host
          # info, comment out the 'value: dns' line above, and uncomment the
          # line below.
          # value: env
          ports:
            - containerPort: 5672
---
apiVersion: v1
kind: Service
metadata:
  name: storage
  labels:
    app: storage
    tier: storage
spec:
  # if your cluster supports it, uncomment the following to automatically create
  # an external load-balanced IP for the frontend service.
  # type: LoadBalancer
  ports:
    # the port that this service should serve on
  - port: 8082
    targetPort: 8082
  selector:
    app: storage
    tier: storage
---
apiVersion: v1
kind: ReplicationController
metadata:
  name: storage
  # these labels can be applied automatically
  # from the labels in the pod template if not set
  labels:
    app: storage
    tier: storage
spec:
  # this replicas value is default
  # modify it according to your case
  replicas: 1
  # selector can be applied automatically
  # from the labels in the pod template if not set
  # selector:
  #   app: guestbook
  #   tier: frontend
  template:
    metadata:
      labels:
        app: storage
        tier: storage
    spec:
      containers:
      - name: storage
        image: nherbaut/dummy-storage
        env:
        - name: box
          value: dns
          # If your cluster config does not include a dns service, then to
          # instead access environment variables to find service host
          # info, comment out the 'value: dns' line above, and uncomment the
          # line below.
          # value: env
        ports:
        - containerPort: 8082
